Certainly! You can achieve this without using the Pandas library by using Python's built-in `csv` module. Here's a step by step guide for looking up the corresponding value of a column:

1. Import the `csv` module.
2. Define the name of the file and the column headers involved.
3. Define the value to be searched and the target column where you need the corresponding value.
4. Read the data file using `csv.reader` and iterate through the rows to find the desired value.

Here's an example code snippet:

```python
import csv

# Define variables
file_name = 'your_file.csv'
search_col_name = 'ID'
target_col_name = 'Name'
search_value = 123

# Find indices for search and target columns
with open(file_name, 'r') as file:
    reader = csv.reader(file)
    col_names = next(reader)  # assuming the first row contains column names
    search_col_index = col_names.index(search_col_name)
    target_col_index = col_names.index(target_col_name)

# Search for the corresponding value
with open(file_name, 'r') as file:
    reader = csv.reader(file)
    next(reader)  # skip header row
    for row in reader:
        if row[search_col_index] == str(search_value):  # convert the search value to string for matching
            corresponding_value = row[target_col_index]
            print(f"The corresponding value for {search_value} is: {corresponding_value}")
            break
    else:
        print(f"No matching value found for {search_value}.")
```

Replace `'your_file.csv'` with the name of your .csv file and set the appropriate column names and search value.

Keep in mind that this example assumes the search value is unique, which means it only returns the first matching value it encounters. Adjust the code as needed to fit your specific use case.